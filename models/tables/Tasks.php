<?php

namespace app\models\tables;

use function PHPSTORM_META\type;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use app\models\tables\Files;
use yii\web\View;

/**
 * This is the model class for table "tasks".
 *
 * @property int $id
 * @property string $name
 * @property string $date
 * @property string $description
 * @property int $user_id
 * @property string $date_end
 *
 * @property Users $user
 * @property array $documents
 */
class Tasks extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'tasks';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'date', 'date_end'], 'required'],
            [['date'], 'safe'],
            [['description'], 'string'],
            [['user_id'], 'integer'],
            [['name'], 'string', 'max' => 255],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => Users::class, 'targetAttribute' => ['user_id' => 'id']],
            ['date', 'compare', 'operator' => '<=', 'type' => 'number', 'compareAttribute' => 'date_end'],
        ];
    }

    public function beforeValidate()
    {
        $this->date = strtotime($this->date);
        $this->date_end = strtotime($this->date_end);

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function afterValidate()
    {
        $this->date = date('Y-m-d', $this->date);
        $this->date_end = date('Y-m-d', $this->date_end);

        parent::afterValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'date' => 'Date',
            'description' => 'Description',
            'user_id' => 'User ID',
            'date_end' => 'Date end'
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(Users::class, ['id' => 'user_id']);
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
//                'createdAtAttribute' => 'create_time',
//                'updatedAtAttribute' => 'update_time',
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    public static function findCurrentTasks()
    {
        return self::find()
            ->where(['>', 'date', date('Y-m-d H:i:s')])
            ->andWhere(['<', 'date', date('Y-m-d H:i:s', strtotime('+1 month'))])
            ->andWhere(['user_id' => Yii::$app->user->id]);
    }

    public function getDocuments()
    {
        $documentsArray = [];
        $documents = $this->hasMany(Files::class, ['task_id' => 'id'])->select('files.path')->all();
        foreach ($documents as $file) {
            $pathArray = explode('/', $file->path);
            $url = implode('/', array_slice($pathArray, 3));
            $filename = $pathArray[count($pathArray) - 1];
            if ($pathArray[count($pathArray) - 2] == 'images') {
                $thumbnail = Files::getThumbnail($filename);

                $documentsArray[] = [
                    'title' => $filename,
                    'url' => '/' . $url,
                    'thumbnail' => $thumbnail
                ];
            } else {
                $documentsArray[] = [
                    'title' => $filename,
                    'url' => '/' . $url,
                ];
            }
        }
        return $documentsArray;
    }

    public static function getDeadlineTasks()
    {
        return self::find()
            ->with('user')
            ->andWhere(['=', 'date_end', date('Y-m-d', strtotime('+1 days'))])
            ->all();
    }
}
